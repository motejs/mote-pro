// 注释掉默认的配置
// {
//   "compilerOptions": {
//     "target": "ES2020",
//     "useDefineForClassFields": true,
//     "lib": ["ES2020", "DOM", "DOM.Iterable"],
//     "module": "ESNext",
//     "skipLibCheck": true,

//     /* Bundler mode */
//     "moduleResolution": "bundler",
//     "allowImportingTsExtensions": true,
//     "resolveJsonModule": true,
//     "isolatedModules": true,
//     "noEmit": true,
//     "jsx": "react-jsx",

//     /* Linting */
//     "strict": true,
//     "noUnusedLocals": true,
//     "noUnusedParameters": true,
//     "noFallthroughCasesInSwitch": true
//   },
//   "include": ["src"],
//   "references": [{ "path": "./tsconfig.node.json" }]
// }



{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "outDir": "./dist/", // 重定向输出目录
    "sourceMap": true, // 生成相应的 .map文件
    "noImplicitAny": false, // 在表达式和声明上有隐含的 any类型时报错。（默认为false，个人建议也为false，可以兼容之前的js代码，这里改为true是为了我自己检测哪些类型需要处理）
    "module": "esnext", // 模块引入方式
    "target": "esnext", // 指定ECMAScript目标版本
    "moduleResolution": "node", // 决定如何处理模块
    // "lib": [
    //   "esnext",
    //   "dom"
    // ], // 编译过程中需要引入的库文件的列表。
    "skipLibCheck": true, //忽略所有库中的声明文件（ *.d.ts）的类型检查。
    "jsx": "react", // 在 .tsx文件里支持JSX
    "allowJs": false,
    "checkJs": false,
    // ts下别名的检测
    "baseUrl": "./",
    "paths": {
      "@": [
        "src"
      ],
      "@/*": [
        "src/*"
      ],
      "@icon/*": [
        "src/components/Icon/*"
      ],
    }
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/typings.d.ts" // 这个表示处理根目录的src目录下所有的.ts和.tsx文件，并不是所有文件
  ],
  "exclude": [
    "node_modules"
  ],
  "references": [{ "path": "./tsconfig.node.json" }]
}
